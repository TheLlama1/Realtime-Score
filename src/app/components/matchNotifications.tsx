"use client";

import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import useAuth from "@/hooks/useAuth";
import { getFavoriteTeams } from "@/app/services/getFavouriteTeams";
import getLiveFixtures from "@/app/services/getLiveFixtures";
import { Fixture } from "@/types/apiFootball";
import { FaFutbol, FaStopwatch, FaFlagCheckered, FaBell } from "react-icons/fa"; // –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –∏–∫–æ–Ω–∏—Ç–µ

const MatchNotifications = () => {
  const user = useAuth();
  const [notifiedMatches, setNotifiedMatches] = useState<Set<number>>(
    new Set()
  );
  const [goalNotifications, setGoalNotifications] = useState<{
    [key: number]: number;
  }>({});

  useEffect(() => {
    if (!user) return;

    const checkLiveMatches = async () => {
      console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –º–∞—á–æ–≤–µ –Ω–∞ –∂–∏–≤–æ...");
      try {
        const favoriteTeamIds = await getFavoriteTeams(user.uid);
        if (favoriteTeamIds.length === 0) return;

        const liveFixtures = await getLiveFixtures();

        liveFixtures.forEach((league) => {
          league.fixtures.forEach((match: Fixture) => {
            const isFavTeamPlaying =
              favoriteTeamIds.includes(match.teams.home.id) ||
              favoriteTeamIds.includes(match.teams.away.id);

            if (isFavTeamPlaying) {
              const matchId = match.fixture.id;
              const homeScore = match.goals.home ?? 0;
              const awayScore = match.goals.away ?? 0;

              // –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞ —Å—Ç–∞—Ä—Ç –Ω–∞ –º–∞—á
              if (
                !notifiedMatches.has(matchId) &&
                match.fixture.status.short === "1H"
              ) {
                toast.info(
                  <div>
                    <FaBell
                      size={20}
                      style={{ marginRight: "10px", color: "#4caf50" }}
                    />
                    <b>{match.teams.home.name}</b> vs{" "}
                    <b>{match.teams.away.name}</b> –∑–∞–ø–æ—á–Ω–∞!
                  </div>
                );
                setNotifiedMatches((prev) => new Set(prev).add(matchId));
              }

              // –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞ –≥–æ–ª
              if (goalNotifications[matchId] !== homeScore + awayScore) {
                toast.success(
                  <div>
                    <FaFutbol
                      size={20}
                      style={{ marginRight: "10px", color: "#f1c40f" }}
                    />
                    –ì–û–õ! <b>{match.teams.home.name}</b> {homeScore} -{" "}
                    {awayScore} <b>{match.teams.away.name}</b>
                  </div>
                );
                setGoalNotifications((prev) => ({
                  ...prev,
                  [matchId]: homeScore + awayScore,
                }));
              }

              // –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞ –ø–æ–ª—É–≤—Ä–µ–º–µ
              if (
                !notifiedMatches.has(matchId) &&
                match.fixture.status.short === "HT"
              ) {
                toast.info(
                  <div>
                    <FaStopwatch
                      size={20}
                      style={{ marginRight: "10px", color: "#f1c40f" }}
                    />
                    –ü–æ–ª—É–≤—Ä–µ–º–µ: <b>{match.teams.home.name}</b> {homeScore} -{" "}
                    {awayScore} <b>{match.teams.away.name}</b>
                  </div>
                );
                setNotifiedMatches((prev) => new Set(prev).add(matchId));
              }

              // –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞ –∫—Ä–∞–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç
              if (
                !notifiedMatches.has(matchId) &&
                match.fixture.status.short === "FT"
              ) {
                toast.success(
                  <div>
                    <FaFlagCheckered
                      size={20}
                      style={{ marginRight: "10px", color: "#e74c3c" }}
                    />
                    –ö—Ä–∞–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç: <b>{match.teams.home.name}</b> {homeScore} -{" "}
                    {awayScore} <b>{match.teams.away.name}</b>
                  </div>
                );
                setNotifiedMatches((prev) => new Set(prev).add(matchId));
              }
            }
          });
        });
      } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—á–æ–≤–µ—Ç–µ:", error);
      }
    };

    checkLiveMatches();
    const interval = setInterval(checkLiveMatches, 60000); // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –Ω–∞ –≤—Å–µ–∫–∏ 60 —Å–µ–∫

    return () => clearInterval(interval);
  }, [user]);

  return null;
};

export default MatchNotifications;
